{"version":3,"sources":["redux/reducers/todos.js","localStorage.js","redux/actions/actionTypes.js","redux/reducers/filters.js","redux/reducers/sort.js","redux/reducers/index.js","redux/store/store.js","components/Button/StyledComponents.js","components/TodoItem/StyledComponents.js","components/Checkbox/StyledComponents.js","components/Checkbox/Checkbox.js","components/TodoItem/TodoItem.js","components/TodoList/StyledComponents.js","components/TodoList/TodoList.js","redux/actions/todosActions.js","components/TodoBoard/StyledComponents.js","components/Input/StyledComponents.js","components/Input/Input.js","components/DateInput/StyledComponents.js","components/DateInput/DateInput.js","components/AddingTodoPanel/StyledComponents.js","components/AddingTodoPanel/AddingTodoPanel.js","components/Select/Select.js","components/FiltersPanel/StyledComponents.js","components/FiltersPanel/FiltersPanel.js","redux/actions/filtersActions.js","redux/actions/sortActions.js","components/Header/StyledComponents.js","components/Header/Header.js","customHooks/useTodoBoard.js","components/TodoBoard/TodoBoard.js","StyledComponents.js","App.js","serviceWorker.js","index.js"],"names":["persistedState","key","serializedState","localStorage","getItem","JSON","parse","loadState","todos","state","action","type","filter","todo","id","payload","map","isCompleted","filters","text","date","sortOptions","value","todoApp","combineReducers","sort","store","createStore","composeWithDevTools","subscribe","stringify","setItem","saveState","getState","CustomButton","styled","button","ItemWrapper","div","props","completed","DeleteButton","ItemInfo","CustomSpan","span","ItemText","p","ItemDate","InfoWrapper","HiddenCheckbox","input","attrs","Icon","svg","StyledCheckbox","checked","CheckboxContainer","Checkbox","onChange","onClick","name","viewBox","points","TodoItem","deleteTodo","CustomList","mapDispatchToProps","toggleTodo","connect","selectDisplayedTodos","createSelector","sortType","todosArr","filteredTodos","item","Object","keys","every","includes","a","b","aValue","toLowerCase","bValue","displayedTodos","useSelector","length","AddingButton","OpenModalButton","CustomInput","React","forwardRef","ref","inputText","placeholder","target","CustomDateInput","DateInput","labelText","AddingPanel","ModalWrapper","isModalOpened","CloseCross","addTodo","uuidv4","setInputText","setDate","setModalOpened","useRef","current","focus","Select","optionsList","selectedOption","option","FiltersWrapper","setFilterByText","setFilterByDate","setSortingType","CustomHeader","h1","Header","children","UseTodoBoard","useState","Date","TodoBoard","GlobalStyle","createGlobalStyle","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e526051.chunk.js","sourcesContent":["import { loadState } from '../../localStorage';\nimport { ADD_TODO, DELETE_TODO, TOGGLE_TODO } from '../actions/actionTypes';\n\nconst persistedState = loadState('todos');\n\nconst todos = (state = persistedState, action) => {\n  switch (action.type) {\n    case DELETE_TODO:\n      return state.filter((todo) => todo.id !== action.payload);\n\n    case TOGGLE_TODO:\n      return state.map((todo) =>\n        todo.id === action.payload ? { ...todo, isCompleted: !todo.isCompleted } : todo,\n      );\n    case ADD_TODO:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n","export const loadState = (key) => {\n  const serializedState = localStorage.getItem(key);\n  if (serializedState === null) {\n    return undefined;\n  }\n  return JSON.parse(serializedState);\n};\n\nexport const saveState = (key, state) => {\n  const serializedState = JSON.stringify(state);\n  localStorage.setItem(key, serializedState);\n};\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const SET_FILTER_BY_TEXT = 'SET_FILTER_BY_TEXT';\nexport const SET_FILTER_BY_DATE = 'SET_FILTER_BY_DATE';\nexport const SET_SORTING_TYPE = 'SET_SORTING_TYPE';\n","import { SET_FILTER_BY_TEXT, SET_FILTER_BY_DATE } from '../actions/actionTypes';\n\nconst filters = (state = { text: '', date: '' }, action) => {\n  switch (action.type) {\n    case SET_FILTER_BY_TEXT:\n      return { ...state, text: action.payload };\n    case SET_FILTER_BY_DATE:\n      return { ...state, date: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filters;\n","import { SET_SORTING_TYPE } from '../actions/actionTypes';\n\nconst sortOptions = (\n  state = [\n    { type: 'default', value: 'Default' },\n    { type: 'date', value: 'By date' },\n    { type: 'text', value: 'By text' },\n  ],\n) => {\n  return state;\n};\n\nconst sort = (state = sortOptions()[0].type, action) => {\n  switch (action.type) {\n    case SET_SORTING_TYPE:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport { sortOptions, sort };\n","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport filters from './filters';\nimport { sortOptions, sort } from './sort';\n\nconst todoApp = combineReducers({ todos, filters, sortOptions, sort });\n\nexport default todoApp;\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport todoApp from '../reducers';\nimport { saveState } from '../../localStorage';\n\nconst store = createStore(todoApp, composeWithDevTools());\n\nstore.subscribe(() => {\n  saveState('todos', store.getState().todos);\n});\n\nexport default store;\n","import styled from 'styled-components';\r\n\r\nconst CustomButton = styled.button`\r\n  font-family: Roboto;\r\n  width: 80px;\r\n  color: #fff;\r\n  padding: 5px;\r\n  box-sizing: border-box;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  border: none;\r\n  height: 40px;\r\n`;\r\n\r\nexport { CustomButton };\r\n","import styled from 'styled-components';\r\nimport { CustomButton } from '../Button/StyledComponents';\r\n\r\nconst ItemWrapper = styled.div`\r\n  font-family: Roboto;\r\n  max-width: 600px;\r\n  background: ${(props) => (props.completed ? '#ececec' : '#fff')};\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  border: 1px solid #d2d2d2;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin: 10px 0;\r\n\r\n  &:hover {\r\n    background: #e3f5f1;\r\n    border: 1px solid #95c8bd;\r\n    transition: 0.5s;\r\n  }\r\n`;\r\n\r\nconst DeleteButton = styled(CustomButton)`\r\n  background: #ff674d;\r\n  &:hover {\r\n    background: #ff573a;\r\n    transition: 0.5s;\r\n  }\r\n`;\r\n\r\nconst ItemInfo = styled.div`\r\n  display: flex;\r\n  align-items: left;\r\n  flex-direction: column;\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst CustomSpan = styled.span`\r\n  color: #b3d4d4;\r\n  display: inline-block;\r\n  margin: 0 5px 0 0;\r\n`;\r\n\r\nconst ItemText = styled.p`\r\n  margin: 10px 0;\r\n  padding: 0;\r\n  text-align: left;\r\n  font-weight: bold;\r\n  color: ${(props) => (props.completed ? '#9C9C9C' : '#000')};\r\n  text-decoration: ${(props) => (props.completed ? 'line-through' : 'none')};\r\n`;\r\n\r\nconst ItemDate = styled.p`\r\n  margin: 0;\r\n  font-size: 12px;\r\n`;\r\n\r\nconst InfoWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`;\r\n\r\nexport { ItemWrapper, InfoWrapper, DeleteButton, CustomSpan, ItemInfo, ItemText, ItemDate };\r\n","import styled from 'styled-components';\r\n\r\nconst HiddenCheckbox = styled.input.attrs({ type: 'checkbox' })`\r\n  border: 0;\r\n  clip: rect(0 0 0 0);\r\n  clippath: inset(50%);\r\n  height: 1px;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  padding: 0;\r\n  position: absolute;\r\n  white-space: nowrap;\r\n  width: 1px;\r\n`;\r\n\r\nconst Icon = styled.svg`\r\n  fill: none;\r\n  stroke: white;\r\n  stroke-width: 2px;\r\n`;\r\n\r\nconst StyledCheckbox = styled.div`\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  width: 20px;\r\n  height: 20px;\r\n  box-sizing: border-box;\r\n  background: ${(props) => (props.checked ? '#95C8BD' : '#fff')};\r\n  border: ${(props) => (props.checked ? 'none' : '1px solid #d2d2d2')};\r\n  border-radius: 3px;\r\n  transition: all 150ms;\r\n\r\n  ${HiddenCheckbox}:focus + & {\r\n    box-shadow: 0 0 0 3px pink;\r\n  }\r\n\r\n  ${Icon} {\r\n    visibility: ${(props) => (props.checked ? 'visible' : 'hidden')};\r\n  }\r\n`;\r\n\r\nconst CheckboxContainer = styled.div`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n`;\r\n\r\nexport { HiddenCheckbox, StyledCheckbox, CheckboxContainer, Icon };\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckboxContainer, HiddenCheckbox, StyledCheckbox, Icon } from './StyledComponents';\n\nconst Checkbox = ({ completed, onChange }) => {\n  return (\n    <CheckboxContainer onClick={onChange}>\n      <HiddenCheckbox type=\"checkbox\" name=\"checkbox\" checked={completed} />\n      <StyledCheckbox checked={completed}>\n        <Icon viewBox=\"0 0 24 24\">\n          <polyline points=\"20 6 9 17 4 12\" />\n        </Icon>\n      </StyledCheckbox>\n    </CheckboxContainer>\n  );\n};\n\nCheckbox.propTypes = {\n  completed: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\n\nimport {\n  ItemWrapper,\n  DeleteButton,\n  CustomSpan,\n  ItemInfo,\n  ItemText,\n  ItemDate,\n  InfoWrapper,\n} from './StyledComponents';\nimport Checkbox from '../Checkbox/Checkbox';\n\nconst TodoItem = ({ text, completed, id, date, onClick, deleteTodo }) => {\n  const handleClick = () => {\n    onClick(id);\n  };\n\n  const handleDelete = () => {\n    deleteTodo(id);\n  };\n  return (\n    <ItemWrapper completed={completed}>\n      <InfoWrapper>\n        <Checkbox completed={completed} onChange={handleClick} />\n        <ItemInfo>\n          <ItemText completed={completed}>{text}</ItemText>\n          <ItemDate>\n            <CustomSpan>Deadline</CustomSpan>\n            {date}\n          </ItemDate>\n        </ItemInfo>\n      </InfoWrapper>\n      <DeleteButton onClick={handleDelete}>Delete</DeleteButton>\n    </ItemWrapper>\n  );\n};\n\nTodoItem.propTypes = {\n  text: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  id: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import styled from 'styled-components';\n\nconst CustomList = styled.div`\n  max-width: 700px;\n  margin: 0 auto;\n  padding: 0 20px;\n`;\n\nexport { CustomList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, useSelector } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport TodoItem from '../TodoItem/TodoItem';\nimport { CustomList } from './StyledComponents';\nimport { deleteTodo, toggleTodo } from '../../redux/actions/todosActions';\n\nconst TodoList = ({ toggleTodo, deleteTodo }) => {\n  const sortTodos = (todosArr, type) => {\n    return [...todosArr].sort((a, b) => {\n      const aValue = a[type].toLowerCase();\n      const bValue = b[type].toLowerCase();\n      if (aValue < bValue) {\n        return -1;\n      }\n      if (aValue > bValue) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n\n  const selectDisplayedTodos = createSelector(\n    (state) => state.todos,\n    (state) => state.filters,\n    (state) => state.sort,\n    (todos, filters, sortType) => {\n      const filteredTodos = todos.filter((item) =>\n        Object.keys(filters).every((type) => item[type].includes(filters[type])),\n      );\n      const defaultSort = 'default';\n      return sortType === defaultSort ? filteredTodos : sortTodos(filteredTodos, sortType);\n    },\n  );\n\n  const displayedTodos = useSelector(selectDisplayedTodos);\n\n  return (\n    <CustomList>\n      {displayedTodos.length === 0 ? (\n        <div>No added tasks yet :(</div>\n      ) : (\n        displayedTodos.map((item) => (\n          <TodoItem\n            text={item.text}\n            completed={item.isCompleted}\n            id={item.id}\n            key={item.id}\n            date={item.date}\n            onClick={toggleTodo}\n            deleteTodo={deleteTodo}\n          />\n        ))\n      )}\n    </CustomList>\n  );\n};\n\nconst mapDispatchToProps = {\n  deleteTodo,\n  toggleTodo,\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  sortType: PropTypes.string.isRequired,\n  filters: PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(TodoList);\n","import { v4 as uuidv4 } from 'uuid';\nimport { ADD_TODO, DELETE_TODO, TOGGLE_TODO } from './actionTypes';\n\nconst addTodo = (text, date) => {\n  return {\n    type: ADD_TODO,\n    payload: { text, date, isCompleted: false, id: uuidv4() },\n  };\n};\n\nconst deleteTodo = (id) => {\n  return {\n    type: DELETE_TODO,\n    payload: id,\n  };\n};\n\nconst toggleTodo = (id) => {\n  return {\n    type: TOGGLE_TODO,\n    payload: id,\n  };\n};\n\nexport { addTodo, deleteTodo, toggleTodo };\n","import styled from 'styled-components';\r\nimport { CustomButton } from '../Button/StyledComponents';\r\n\r\nconst AddingButton = styled(CustomButton)`\r\n  background: #95c8bd;\r\n  &:hover {\r\n    background: #8abab0;\r\n    transition: 0.5s;\r\n  }\r\n`;\r\n\r\nconst OpenModalButton = styled(CustomButton)`\r\n  background: #8aaaba;\r\n  width: 150px;\r\n  margin: 10px;\r\n\r\n  &:hover {\r\n    background: #75a5bd;\r\n    transition: 0.5s;\r\n  }\r\n`;\r\n\r\nexport { AddingButton, OpenModalButton };\r\n","import styled from 'styled-components';\r\n\r\nconst CustomInput = styled.input`\r\n  padding: 10px;\r\n  width: 350px;\r\n  border-radius: 5px;\r\n  border: 1px solid #d2d2d2;\r\n  margin: 10px 0;\r\n`;\r\n\r\nexport { CustomInput };\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CustomInput } from './StyledComponents';\n\nconst Input = ({ inputText, onChange, placeholder }, ref) => {\n  const handleChange = ({ target }) => onChange(target.value);\n  return (\n    <CustomInput\n      type=\"text\"\n      value={inputText}\n      onChange={handleChange}\n      placeholder={placeholder}\n      ref={ref}\n    />\n  );\n};\n\nInput.propTypes = {\n  inputText: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n\nexport default React.forwardRef(Input);\n","import styled from 'styled-components';\r\n\r\nconst CustomDateInput = styled.input.attrs({ type: 'date' })`\r\n  border: 1px solid #d2d2d2;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  width: 130px;\r\n  margin: 10px 0;\r\n`;\r\n\r\nexport { CustomDateInput };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CustomDateInput } from './StyledComponents';\r\n\r\nconst DateInput = ({ value, onChange, labelText }) => {\r\n  const handleChange = ({ target }) => onChange(target.value);\r\n\r\n  return (\r\n    <label>\r\n      {labelText}\r\n      <CustomDateInput type=\"date\" value={value} onChange={handleChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nDateInput.propTypes = {\r\n  value: PropTypes.instanceOf(Date).isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  labelText: PropTypes.string,\r\n};\r\n\r\nexport default DateInput;\r\n","import styled from 'styled-components';\r\n\r\nconst AddingPanel = styled.div`\r\n  max-width: 700px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  background: #fff;\r\n  padding: 20px;\r\n  flex-basis: 100%;\r\n  align-items: center;\r\n`;\r\n\r\nconst ModalWrapper = styled.div`\r\n  display: ${(props) => (props.isModalOpened ? 'flex' : 'none')}; /* Hidden by default */\r\n  position: fixed; /* Stay in place */\r\n  z-index: 1; /* Sit on top */\r\n  align-items: center;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%; /* Full width */\r\n  height: 100%; /* Full height */\r\n  overflow: auto; /* Enable scroll if needed */\r\n  background-color: rgb(0, 0, 0); /* Fallback color */\r\n  background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\r\n`;\r\n\r\nconst CloseCross = styled.span`\r\n  color: #aaa;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  align-self: flex-end;\r\n\r\n  &:hover {\r\n    color: black;\r\n    text-decoration: none;\r\n    transition: 0.5s;\r\n  }\r\n`;\r\n\r\nexport { AddingPanel, ModalWrapper, CloseCross };\r\n","import React, { useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Input from '../Input/Input';\nimport DateInput from '../DateInput/DateInput';\nimport { AddingButton } from '../TodoBoard/StyledComponents';\nimport { AddingPanel, CloseCross, ModalWrapper } from './StyledComponents';\nimport { addTodo } from '../../redux/actions/todosActions';\n\nconst AddingTodoPanel = ({\n  setInputText,\n  setDate,\n  addTodo,\n  isModalOpened,\n  inputText,\n  setModalOpened,\n  date,\n}) => {\n  const input = useRef(null);\n  const focusTextInput = () => {\n    input.current.focus();\n  };\n\n  const handleBtnClick = () => {\n    addTodo(inputText, date);\n    setModalOpened(!isModalOpened);\n  };\n  return (\n    <ModalWrapper isModalOpened={isModalOpened}>\n      <AddingPanel>\n        <CloseCross onClick={() => setModalOpened(!isModalOpened)}>&times;</CloseCross>\n        <Input\n          onChange={setInputText}\n          placeholder=\"Enter a task...\"\n          ref={input}\n          inputText={inputText}\n        />\n        <DateInput onChange={setDate} value={date} />\n        <AddingButton onClick={inputText ? handleBtnClick : focusTextInput}>Add</AddingButton>\n      </AddingPanel>\n    </ModalWrapper>\n  );\n};\n\nconst mapDispatchToProps = {\n  addTodo,\n};\n\nAddingTodoPanel.propTypes = {\n  setInputText: PropTypes.string.isRequired,\n  setDate: PropTypes.func.isRequired,\n  addTodo: PropTypes.func.isRequired,\n  isModalOpened: PropTypes.bool.isRequired,\n  inputText: PropTypes.string.isRequired,\n  setModalOpened: PropTypes.func.isRequired,\n  date: PropTypes.string.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(AddingTodoPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Select = ({ optionsList, selectedOption, onChange, labelText }) => {\n  const handleChange = ({ target }) => onChange(target.value);\n  return (\n    <label>\n      {labelText}\n      <select value={selectedOption} name=\"sort\" onChange={handleChange}>\n        {optionsList.map((option) => (\n          <option value={option.type} key={option.value}>\n            {option.value}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nSelect.propTypes = {\n  labelText: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  selectedOption: PropTypes.string.isRequired,\n  optionsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      type: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default Select;\n","import styled from 'styled-components';\r\n\r\nconst FiltersWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport { FiltersWrapper };\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Input from '../Input/Input';\nimport DateInput from '../DateInput/DateInput';\nimport Select from '../Select/Select';\nimport { FiltersWrapper } from './StyledComponents';\nimport { setFilterByText, setFilterByDate } from '../../redux/actions/filtersActions';\nimport { setSortingType } from '../../redux/actions/sortActions';\n\nconst FiltersPanel = ({\n  sortOptions,\n  sortType,\n  setSortingType,\n  filters,\n  setFilterByText,\n  setFilterByDate,\n}) => {\n  return (\n    <FiltersWrapper>\n      <Input\n        onChange={setFilterByText}\n        placeholder=\"Search for todos...\"\n        inputText={filters.text}\n      />\n      <DateInput onChange={setFilterByDate} labelText=\"Filter by date: \" />\n      <Select\n        optionsList={sortOptions}\n        selectedOption={sortType}\n        onChange={setSortingType}\n        labelText=\"Sort by: \"\n      />\n    </FiltersWrapper>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    filters: state.filters,\n    sortOptions: state.sortOptions,\n    sortType: state.sort,\n  };\n};\n\nconst mapDispatchToProps = {\n  setFilterByText,\n  setFilterByDate,\n  setSortingType,\n};\n\nFiltersPanel.propTypes = {\n  setSortingType: PropTypes.func.isRequired,\n  setFilterByDate: PropTypes.func.isRequired,\n  sortType: PropTypes.string.isRequired,\n  sortOptions: PropTypes.arrayOf(\n    PropTypes.shape({ type: PropTypes.string.isRequired, value: PropTypes.string.isRequired }),\n  ).isRequired,\n  setFilterByText: PropTypes.func.isRequired,\n  filters: PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FiltersPanel);\n","import { SET_FILTER_BY_DATE, SET_FILTER_BY_TEXT } from './actionTypes';\n\nconst setFilterByText = (text) => {\n  return {\n    type: SET_FILTER_BY_TEXT,\n    payload: text,\n  };\n};\n\nconst setFilterByDate = (date) => {\n  return {\n    type: SET_FILTER_BY_DATE,\n    payload: date,\n  };\n};\n\nexport { setFilterByText, setFilterByDate };\n","import { SET_SORTING_TYPE } from './actionTypes';\n\nconst setSortingType = (type) => {\n  return {\n    type: SET_SORTING_TYPE,\n    payload: type,\n  };\n};\n\nexport { setSortingType };\n","import styled from 'styled-components';\r\n\r\nconst CustomHeader = styled.h1`\r\n  background: #95c8bd;\r\n  color: #fff;\r\n  margin: 0;\r\n  padding: 35px 0;\r\n`;\r\n\r\nexport { CustomHeader };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CustomHeader } from './StyledComponents';\r\n\r\nconst Header = ({ children }) => {\r\n  return <CustomHeader>{children}</CustomHeader>;\r\n};\r\n\r\nHeader.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\n\nconst UseTodoBoard = () => {\n  const [inputText, setInputText] = useState('');\n  const [date, setDate] = useState(new Date());\n  const [isModalOpened, setModalOpened] = useState(false);\n\n  return {\n    inputText,\n    setInputText,\n    date,\n    setDate,\n    isModalOpened,\n    setModalOpened,\n  };\n};\n\nexport default UseTodoBoard;\n","import React from 'react';\nimport TodoList from '../TodoList/TodoList';\nimport { OpenModalButton } from './StyledComponents';\nimport AddingTodoPanel from '../AddingTodoPanel/AddingTodoPanel';\nimport FiltersPanel from '../FiltersPanel/FiltersPanel';\nimport Header from '../Header/Header';\nimport UseTodoBoard from '../../customHooks/useTodoBoard';\n\nconst TodoBoard = () => {\n  const { inputText, setInputText, date, setDate, isModalOpened, setModalOpened } = UseTodoBoard();\n  return (\n    <div>\n      <Header>My tasks</Header>\n      <FiltersPanel />\n      <OpenModalButton onClick={setModalOpened}>Add Task</OpenModalButton>\n      {isModalOpened ? (\n        <AddingTodoPanel\n          setDate={setDate}\n          setInputText={setInputText}\n          isModalOpened={isModalOpened}\n          inputText={inputText}\n          setModalOpened={setModalOpened}\n          date={date}\n        />\n      ) : null}\n      <TodoList />\n    </div>\n  );\n};\n\nexport default TodoBoard;\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body, html {\r\n   font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    height: 100%;\r\n    background: #f1f1f1;\r\n    font-size: calc(14px + (18 - 14) * ((100vw - 300px) / (1600 - 300)));\r\n    overflow-x: hidden;\r\n  }\r\n`;\r\n\r\nexport { GlobalStyle };\r\n","import React from 'react';\nimport './App.css';\nimport TodoBoard from './components/TodoBoard/TodoBoard';\nimport { GlobalStyle } from './StyledComponents';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <TodoBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}